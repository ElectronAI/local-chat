name: Build

on:
  push:
    tags:
      - '*' # Trigger on every newly created tag
  workflow_dispatch: {} # Manually build

# Defaults for every job and step in this workflow
defaults:
  run:
    shell: bash # Run everything using bash, even on Windows

# Global environment variables
env:
  NODE_VERSION: '18'

# Ensure only a single build workflow runs at any one time
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# This workflow file contains four jobs, three to build the corresponding
# releases on all three supported platforms, and a last one, which will
# create the release draft.
jobs:
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                              WINDOWS BUILDS                               #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_win_x64:
    name: Windows (x86_64)
    runs-on: windows-latest
    steps:
      - name: Checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up build environment
        run: yarn install --immutable
      - name: Retrieve package.json version
        id: ref
        run: echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
      - name: Package & Release
        run: yarn package:win-x64 && yarn release:win-x64
      - name: Inspect out dir
        run: ls -al ./out/make
      - name: Cache installer
        uses: actions/upload-artifact@v3
        with:
          name: win32_x64
          path: |
            ./out/make/LocalChat Setup.exe

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                               MACOS BUILDS                                #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_macos_x64:
    name: macOS (x86_64)
    runs-on: macos-latest
    steps:
      # Check out master for a regular release, or develop branch for a nightly
      - name: Checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up build environment
        run: yarn install --immutable
      - name: Retrieve package.json version
        id: ref
        run: echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
      - name: Package
        run: yarn package:mac-x64
      - name: Release
        run: yarn release:mac-x64
      - name: Cache image file
        uses: actions/upload-artifact@v3
        with:
          name: darwin_x64
          path: |
            ./out/make/LocalChat-${{env.version}}-x64.dmg

  build_macos_arm64:
    name: macOS (arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up build environment
        run: yarn install --immutable
      - name: Retrieve package.json version
        id: ref
        run: echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
      - name: Package
        run: yarn package:mac-arm
      - name: Release
        run: yarn release:mac-arm
      - name: Cache image file
        uses: actions/upload-artifact@v3
        with:
          name: darwin_arm64
          path: |
            ./out/make/LocalChat-${{env.version}}-arm64.dmg

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                               LINUX BUILDS                                #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_linux_x64:
    name: Linux (x86_64)
    runs-on: ubuntu-20.04
    steps:
      # Check out master for a regular release, or develop branch for a nightly
      - name: Checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up build environment
        run: yarn install --immutable
      - name: Retrieve package.json version
        id: ref
        run: echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
      - name: Package & Release
        run: |
          yarn package:linux-x64
          yarn release:linux-x64
      - name: Cache installers
        uses: actions/upload-artifact@v3
        with:
          name: linux_x64
          path: |
            ./out/make/deb/x64/localchat_${{env.version}}_amd64.deb
            ./out/make/rpm/x64/localchat_${{env.version}}_x86_64.rpm

  build_linux_arm64:
    name: Linux (arm64)
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up build environment
        run: yarn install --immutable
      - name: Retrieve package.json version
        id: ref
        run: echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
      - name: Package & Release
        run: |
          yarn package:linux-arm
          yarn release:linux-arm
      - name: Cache installers
        uses: actions/upload-artifact@v3
        with:
          name: linux_arm64
          path: |
            ./out/make/deb/arm64/localchat_${{env.version}}_arm64.deb
            ./out/make/rpm/arm64/localchat_${{env.version}}_aarch64.rpm

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                          PREPARE RELEASE DRAFT                            #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # After the three builds, this job downloads all assets, creates and verifies
  # SHA256 checksums, and finally creates a release draft and uploads all
  # assets to it. NOTE: If the workflow detects a nightly is being built, this
  # step rather uploads the binaries to the Zettlr server instead of creating
  # a release draft.
  prepare_release:
    name: Prepare release draft
    needs:
      - build_win_x64
      - build_macos_x64
      - build_macos_arm64
      - build_linux_x64
      - build_linux_arm64
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v3
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up build environment
        run: yarn install --immutable
      - name: Retrieve tag version
        id: ref
        run: echo "version=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV
      - name: Make release directory
        run: mkdir ./release
      # Download all resulting assets from the previous steps.
      - name: Retrieve installers (Windows x86_64)
        uses: actions/download-artifact@v3
        with:
          name: win32_x64
          path: ./release
      # - name: Retrieve installers (Windows arm64)
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: win32_arm64
      #     path: ./release # DEBUG: Disable win arm for now
      - name: Retrieve installers (macOS x86_64)
        uses: actions/download-artifact@v3
        with:
          name: darwin_x64
          path: ./release
      - name: Retrieve installers (macOS arm64)
        uses: actions/download-artifact@v3
        with:
          name: darwin_arm64
          path: ./release
      - name: Retrieve installers (Linux x86_64)
        uses: actions/download-artifact@v3
        with:
          name: linux_x64
          path: ./release
      - name: Retrieve installers (Linux arm64)
        uses: actions/download-artifact@v3
        with:
          name: linux_arm64
          path: ./release
      # Generate the checksums
      - name: Generate SHA256 checksums
        run: |
          cd ./release
          ./out/make/deb/x64/localchat_${{env.version}}_amd64.deb
          sha256sum "LocalChat Setup.exe" > "SHA256SUMS.txt"
          sha256sum "LocalChat-${{env.version}}-x64.dmg" >> "SHA256SUMS.txt"
          sha256sum "LocalChat-${{env.version}}-arm64.dmg" >> "SHA256SUMS.txt"
          sha256sum "localchat_${{env.version}}_amd64.deb" >> "SHA256SUMS.txt"
          sha256sum "localchat_${{env.version}}_arm64.deb" >> "SHA256SUMS.txt"
          sha256sum "localchat_${{env.version}}_x86_64.rpm" >> "SHA256SUMS.txt"
          sha256sum "localchat_${{env.version}}_aarch64.rpm" >> "SHA256SUMS.txt"
          cd ..
      - name: Verify checksums
        run: |
          cd ./release
          sha256sum -c SHA256SUMS.txt
          cd ..
      # IF WE BUILD A NIGHTLY, AT THIS POINT JUST UPLOAD TO THE SERVER.
      # We must make sure to copy the three additional files
      # to the release folder because of the --delete flag in rsync below.
      - name: Create release draft
        if: github.ref_name == 'master'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Populate the inputs of the release we already know
          tag_name: v${{env.version}}
          name: Release v${{env.version}}
          body: If you can read this, we have forgotten to fill in the changelog. Sorry!
          draft: true # Always create as draft, so that we can populate the remaining values easily
          # Gosh, is that convenient as opposed to earlier!
          files: |
            ./release/LocalChat-${{env.version}}-x64.exe
            ./release/LocalChat-${{env.version}}-x64.dmg
            ./release/LocalChat-${{env.version}}-arm64.dmg
            ./release/LocalChat-${{env.version}}-amd64.deb
            ./release/LocalChat-${{env.version}}-arm64.deb
            ./release/LocalChat-${{env.version}}-x86_64.rpm
            ./release/LocalChat-${{env.version}}-aarch64.rpm
            ./release/SHA256SUMS.txt
